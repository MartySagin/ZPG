#version 330 core
in vec3 FragPos;
in vec3 Normal;

out vec4 fragColor;

uniform vec3 lightPosition;
uniform vec3 lightColor;
uniform vec3 viewPosition;
uniform float lightIntensity;
uniform vec3 objectColor = vec3(0.385, 0.647, 0.812);

    void main() {
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(lightPosition - FragPos);

        // Difúzní komponenta
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lightColor * lightIntensity;

        // Blinn-Phong spekulární komponenta
        vec3 viewDir = normalize(viewPosition - FragPos);
        vec3 halfwayDir = normalize(lightDir + viewDir);
        float spec = pow(max(dot(norm, halfwayDir), 0.0), 32);
        vec3 specular = spec * lightColor;

        vec3 result = (diffuse + specular) * objectColor;
        fragColor = vec4(result, 1.0);
}